package service;

import java.time.LocalDate;
import java.time.Period;

import javax.management.RuntimeErrorException;

import dao.BookDAO;
import dao.BookDAOImpl;
import dao.IssueDAO;
import dao.IssueDAOImpl;
import dao.StudentDAO;
import dao.StudentDAOImpl;
import model.Book;
import model.Issue;
import model.Student;

public class LibraryServiceImpl implements LibraryService{

	IssueDAO issueDao = new IssueDAOImpl();
	BookDAO bookDao = new BookDAOImpl();
	StudentDAO studentDao = new StudentDAOImpl();
	
	@Override
	public Issue issueBook(int bid, int sid) {
		//Algorithm to Issue a book
		
		
		Book book = bookDao.find(bid);
		if(book == null) { System.out.println("no such book"); return null; }
		
		if(book.getIsid() != 0) {
			throw new RuntimeException("book already issued");
		}
		Student student = studentDao.find(sid);
		if(student == null) { System.out.println("no such student"); return null; }
		if(student.numBooks == 3) 
		{
			throw new RuntimeException("more than 3 books not allowed");
		}
		Issue issue = issueDao.add(bid, sid); //new isid will be generated by add
		student.numBooks++; //increment number of books or list of issues
		book.setIsid(issue.getIsid()); //in book add isid for recording issue of book
		return issue;
	}
	
	@Override
	public Issue returnBook(int bid) {
		//Algorithm to return a book
		Book book = bookDao.find(bid);
		if(book == null) { System.out.println("no such book"); return null; }
		
		if(book.getIsid() == 0) {
			throw new RuntimeException("book not issued, How to return");
		}
		Issue issue = issueDao.find(book.getIsid()); //new isid will be generated by add
		Student student = studentDao.find(issue.getSid());
		
		student.numBooks--; //increment number of books or list of issues
		book.setIsid(0); //in book add isid for recording issue of book
		issue.setActRetDate(LocalDate.now());
		int fine  = calcFine(issue);
		issue.setFine(fine);
		
//		bookDao.update(bid, book);
//		studentDao.update(sid, student);
//		issueDao.update(isid, issue);
		
		return issue;
	}

	private int calcFine(Issue issue) {
		LocalDate act = issue.getActRetDate();
		LocalDate exp = issue.getExpRetDate();
		if(act.isAfter(exp))
		{
			Period period = Period.between(exp, act);
			int days = period.getDays();
			int fine = days * 5;
			return fine;
		}
		return 0;
	}
	
}
